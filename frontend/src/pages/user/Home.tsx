import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { MapPin, Mail, Phone, Calendar, Users, Loader2 } from "lucide-react";
import { Link } from "react-router-dom";
import { useForm } from "react-hook-form";
import { toast } from "sonner";

const Home = () => {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors, isSubmitting }
  } = useForm({
    defaultValues: {
      fullName: "",
      email: "",
      message: "",
      rating: 5
    }
  });

  const onSubmit = async (data: any) => {
    try {
      // G·ª≠i ph·∫£n h·ªìi l√™n API
      const response = await fetch('/api/feedback', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: data.fullName,
          email: data.email,
          content: data.message
        }),
      });

      const result = await response.json();

      if (result.success) {
        toast.success("C·∫£m ∆°n b·∫°n! Ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng.");
        reset();
      } else {
        throw new Error(result.message || "Kh√¥ng th·ªÉ g·ª≠i ph·∫£n h·ªìi");
      }
    } catch (error) {
      console.error("Error sending feedback:", error);
      toast.error("R·∫•t ti·∫øc! ƒê√£ x·∫£y ra l·ªói khi g·ª≠i ph·∫£n h·ªìi.");
    }
  };

  // Location coordinates and address - d√πng m·∫∑c ƒë·ªãnh, kh√¥ng fetch API
  const [location, setLocation] = useState({
    address: "96A ƒê. Tr·∫ßn Ph√∫, P. M·ªô Lao, H√† ƒê√¥ng, H√† N·ªôi",
    lat: 20.9732762,
    lng: 105.7875231,
  });

  // Create Google Maps embed URL
  const googleMapsEmbedUrl = `https://maps.google.com/maps?q=${location.lat},${location.lng}&z=16&output=embed`;

  const facilities = [
    {
      title: "S√¢n c·ªè nh√¢n t·∫°o ch·∫•t l∆∞·ª£ng cao",
      description: "S√¢n c·ªè nh·∫≠p kh·∫©u, ƒë·∫£m b·∫£o an to√†n khi thi ƒë·∫•u",
      icon: "üèüÔ∏è",
    },
    {
      title: "H·ªá th·ªëng chi·∫øu s√°ng hi·ªán ƒë·∫°i",
      description: "ƒê√®n LED cao c·∫•p, ƒë·∫£m b·∫£o √°nh s√°ng t·ªëi ∆∞u cho c√°c tr·∫≠n ƒë·∫•u bu·ªïi t·ªëi",
      icon: "üí°",
    },
    {
      title: "Ph√≤ng thay ƒë·ªì ti·ªán nghi",
      description: "Ph√≤ng thay ƒë·ªì r·ªông r√£i, s·∫°ch s·∫Ω v·ªõi t·ªß c√≥ kh√≥a an to√†n",
      icon: "üöø",
    },
    {
      title: "D·ªãch v·ª• ƒÉn u·ªëng",
      description: "ƒê·ªì ƒÉn nh·∫π, n∆∞·ªõc u·ªëng ph·ª•c v·ª• tr∆∞·ªõc v√† sau tr·∫≠n ƒë·∫•u",
      icon: "ü•§",
    },
  ];

  const [fields, setFields] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  // Fetch fields from API
  useEffect(() => {
    const fetchFields = async () => {
      try {
        setLoading(true);
        const response = await fetch('http://localhost:9003/api/fields');
        const data = await response.json();

        // Process the field data based on the actual API response structure
        let fieldsData = [];

        // Handle different API response formats
        if (Array.isArray(data)) {
          // Direct array of fields
          fieldsData = data;
        } else if (data && data.fields && Array.isArray(data.fields)) {
          // Fields in a 'fields' property
          fieldsData = data.fields;
        } else if (data && data.data && Array.isArray(data.data)) {
          // Fields in a 'data' property
          fieldsData = data.data;
        } else if (data && data.success === true && Array.isArray(data.fields)) {
          // Success response with fields array
          fieldsData = data.fields;
        }

        if (fieldsData && fieldsData.length > 0) {
          const mappedFields = fieldsData.map((field: any) => ({
            id: field.fieldId || field.id,
            name: field.name,
            size: field.size || "Kh√¥ng x√°c ƒë·ªãnh",
            img: field.imageUrl
              ? (field.imageUrl.startsWith('http') ? field.imageUrl : `http://localhost:9003${field.imageUrl}`)
              : field.image
                ? (field.image.startsWith('http') ? field.image : `http://localhost:9003${field.image}`)
                : `https://placehold.co/600x400?text=${encodeURIComponent(field.name || 'Football Field')}`,
            description: field.description || "S√¢n b√≥ng ƒë√°"
          }));

          setFields(mappedFields);
        } else {
          console.error("API returned no fields");
          toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch s√¢n b√≥ng");
          setFields([]);
        }
      } catch (error) {
        console.error("Error fetching fields:", error);
        toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch s√¢n b√≥ng");
        setFields([]);
      } finally {
        setLoading(false);
      }
    };

    fetchFields();
  }, []);

  return (
    <div className="space-y-16">
      {/* Hero Section */}
      <section className="py-12 px-4 md:px-0 text-center">
        <div className="max-w-3xl mx-auto">
          <h1 className="text-4xl md:text-5xl font-bold mb-6 text-field-900">
            S√¢n B√≥ng ƒê√° Ch·∫•t L∆∞·ª£ng Cao
          </h1>
          <p className="text-xl mb-8 text-gray-700">
            ƒê·∫∑t s√¢n nhanh ch√≥ng, ti·ªán l·ª£i c√πng nhi·ªÅu d·ªãch v·ª• ƒëi k√®m
          </p>
          <div className="flex flex-col sm:flex-row justify-center gap-4">
            <Link to="/booking">
              <Button className="bg-field-600 hover:bg-field-700 text-white px-6 py-6 text-lg">
                <Calendar className="w-5 h-5 mr-2" /> ƒê·∫∑t s√¢n ngay
              </Button>
            </Link>
            <Link to="/opponents">
              <Button variant="outline" className="border-field-500 text-field-700 hover:bg-field-50 px-6 py-6 text-lg">
                <Users className="w-5 h-5 mr-2" /> T√¨m ƒë·ªëi th·ªß
              </Button>
            </Link>
          </div>
        </div>
      </section>

      {/* Fields Display */}
      <section className="py-12">
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold text-field-800">H·ªá Th·ªëng S√¢n B√≥ng</h2>
          <p className="text-gray-600 mt-2">
            Ch√∫ng t√¥i cung c·∫•p 4 s√¢n c·ªè nh√¢n t·∫°o ch·∫•t l∆∞·ª£ng cao
          </p>
        </div>

        {loading ? (
          <div className="flex justify-center items-center py-12">
            <Loader2 className="w-8 h-8 animate-spin text-field-600 mr-2" />
            <span>ƒêang t·∫£i danh s√°ch s√¢n...</span>
          </div>
        ) : fields.length === 0 ? (
          <div className="text-center py-8 bg-gray-50 rounded-lg">
            <p className="text-gray-500">Kh√¥ng c√≥ s√¢n b√≥ng n√†o</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
            {fields.map((field) => (
              <Card key={field.id} className="overflow-hidden hover:shadow-xl transition-shadow">
                <img
                  src={field.img}
                  alt={field.name}
                  className="w-full h-48 object-cover"
                />
                <CardContent className="p-4 text-center">
                  <h3 className="font-bold text-xl mb-1">{field.name}</h3>
                  <p className="text-gray-600">S√¢n {field.size}</p>
                  <Link to="/booking">
                    <Button variant="outline" className="mt-4 w-full border-field-500 text-field-700 hover:bg-field-50">
                      ƒê·∫∑t s√¢n n√†y
                    </Button>
                  </Link>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </section>

      {/* Facilities */}
      <section className="py-12 bg-field-50 rounded-lg w-full max-w-[98%] mx-auto px-8">
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold text-field-800">Ti·ªán Nghi & D·ªãch V·ª•</h2>
          <p className="text-gray-600 mt-2">
            Ch√∫ng t√¥i cung c·∫•p c√°c ti·ªán √≠ch hi·ªán ƒë·∫°i cho ng∆∞·ªùi ch∆°i
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {facilities.map((facility, index) => (
            <div
              key={index}
              className="bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow"
            >
              <div className="text-4xl mb-4">{facility.icon}</div>
              <h3 className="text-xl font-semibold mb-2">{facility.title}</h3>
              <p className="text-gray-600">{facility.description}</p>
            </div>
          ))}
        </div>
      </section>

      {/* About and Contact */}
      <section className="py-12 grid md:grid-cols-2 gap-8">
        <div>
          <h2 className="text-3xl font-bold text-field-800 mb-6">
            V·ªÅ S√¢n B√≥ng Xanh
          </h2>
          <p className="mb-4 text-gray-700">
            S√¢n B√≥ng Xanh l√† m·ªôt trong nh·ªØng ƒë·ªãa ƒëi·ªÉm ch∆°i b√≥ng ƒë√° ch·∫•t l∆∞·ª£ng h√†ng ƒë·∫ßu t·∫°i th√†nh ph·ªë. Ch√∫ng t√¥i cung c·∫•p s√¢n c·ªè nh√¢n t·∫°o chu·∫©n FIFA, v·ªõi h·ªá th·ªëng chi·∫øu s√°ng hi·ªán ƒë·∫°i v√† c√°c ti·ªán nghi ƒëi k√®m.
          </p>
          <p className="mb-6 text-gray-700">
            ƒê∆∞·ª£c th√†nh l·∫≠p t·ª´ nƒÉm 2025, ch√∫ng t√¥i lu√¥n cam k·∫øt mang ƒë·∫øn kh√¥ng gian thi ƒë·∫•u t·ªët nh·∫•t, d·ªãch v·ª• tuy·ªát v·ªùi v·ªõi gi√° c·∫£ ph·∫£i chƒÉng cho ng∆∞·ªùi ch∆°i b√≥ng ƒë√° m·ªçi l·ª©a tu·ªïi.
          </p>
          <div className="flex items-center gap-4">
            <div className="w-12 h-12 rounded-full bg-field-500 flex items-center justify-center">
              <span className="text-white font-bold text-xl">X</span>
            </div>
            <div>
              <h3 className="font-bold text-xl">S√¢n B√≥ng Xanh</h3>
              <p className="text-gray-600">N∆°i ƒëam m√™ h·ªôi t·ª•</p>
            </div>
          </div>

          {/* Google Map */}
          <div className="mt-8 h-80 border border-gray-300 rounded-lg overflow-hidden">
            <iframe
              src={googleMapsEmbedUrl}
              width="100%"
              height="100%"
              style={{ border: 0 }}
              allowFullScreen={false}
              loading="lazy"
              referrerPolicy="no-referrer-when-downgrade"
              title="S√¢n B√≥ng Xanh location"
            />
          </div>
        </div>

        <div>
          <h2 className="text-3xl font-bold text-field-800 mb-6">
            Li√™n H·ªá & ƒê·∫∑t S√¢n
          </h2>
          <div className="space-y-4">
            <div className="flex items-start">
              <MapPin className="w-5 h-5 text-field-600 mt-1 mr-3" />
              <div>
                <h3 className="font-semibold">ƒê·ªãa ch·ªâ</h3>
                <p className="text-gray-700">
                  {location.address}
                </p>
              </div>
            </div>

            <div className="flex items-start">
              <Phone className="w-5 h-5 text-field-600 mt-1 mr-3" />
              <div>
                <h3 className="font-semibold">ƒêi·ªán tho·∫°i</h3>
                <p className="text-gray-700">0382 802 842</p>
              </div>
            </div>

            <div className="flex items-start">
              <Mail className="w-5 h-5 text-field-600 mt-1 mr-3" />
              <div>
                <h3 className="font-semibold">Email</h3>
                <p className="text-gray-700">nguyenthutrangbg03@gmail.com</p>
              </div>
            </div>
          </div>

          {/* Contact Form */}
          <div className="mt-6 bg-white p-6 rounded-lg shadow-md">
            <h3 className="text-xl font-semibold mb-4">G·ª≠i ph·∫£n h·ªìi</h3>
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
              <div>
                <input
                  type="text"
                  placeholder="H·ªç t√™n"
                  {...register("fullName", {
                    required: "Vui l√≤ng nh·∫≠p h·ªç t√™n",
                    minLength: {
                      value: 2,
                      message: "H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±"
                    }
                  })}
                  className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-field-500 ${
                    errors.fullName ? "border-red-500" : "border-gray-300"
                  }`}
                />
                {errors.fullName && (
                  <p className="mt-1 text-sm text-red-500">
                    {errors.fullName.message as string}
                  </p>
                )}
              </div>
              <div>
                <input
                  type="email"
                  placeholder="Email"
                  {...register("email", {
                    required: "Vui l√≤ng nh·∫≠p email",
                    pattern: {
                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                      message: "Email kh√¥ng h·ª£p l·ªá"
                    }
                  })}
                  className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-field-500 ${
                    errors.email ? "border-red-500" : "border-gray-300"
                  }`}
                />
                {errors.email && (
                  <p className="mt-1 text-sm text-red-500">
                    {errors.email.message as string}
                  </p>
                )}
              </div>
              <div>
                <textarea
                  placeholder="N·ªôi dung"
                  rows={3}
                  {...register("message", {
                    required: "Vui l√≤ng nh·∫≠p n·ªôi dung",
                    minLength: {
                      value: 10,
                      message: "N·ªôi dung ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±"
                    }
                  })}
                  className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-field-500 ${
                    errors.message ? "border-red-500" : "border-gray-300"
                  }`}
                ></textarea>
                {errors.message && (
                  <p className="mt-1 text-sm text-red-500">
                    {errors.message.message as string}
                  </p>
                )}
              </div>
              <Button
                type="submit"
                className="bg-field-600 hover:bg-field-700 text-white w-full"
                disabled={isSubmitting}
              >
                {isSubmitting ? "ƒêang g·ª≠i..." : "G·ª≠i ph·∫£n h·ªìi"}
              </Button>
            </form>
          </div>
        </div>
      </section>
    </div>
  );
};

export default Home;
